// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var Chars, mapStringToNumber, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window !== "undefined" && window !== null) {
    _ = window.Types;
  } else if (typeof module !== "undefined" && module !== null) {
    _ = require('types.js');
  }

  mapStringToNumber = function(array) {
    var index, nr, value, _i, _len;
    if (_.notArray(array)) {
      return 0;
    }
    for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
      value = array[index];
      if (_.isNaN(nr = parseInt(array[index], 10))) {
        return index;
      }
      array[index] = nr;
    }
    return array.length;
  };

  _.inRange = function(nr, range) {
    if ((_.isNaN(nr = parseInt(nr, 10))) || (mapStringToNumber(range) < 2)) {
      return false;
    }
    return (nr >= range[0]) && (nr <= range[1]);
  };

  _.limit = function(nr, range) {
    if (mapStringToNumber(range) < 2) {
      return 0;
    }
    if ((_.isNaN(nr = parseInt(nr, 10))) || (nr < range[0])) {
      return range[0];
    }
    if (nr > range[1]) {
      return range[1];
    }
    return nr;
  };

  _.random = function(min, max) {
    if (mapStringToNumber([min, max]) < 2) {
      return 0;
    }
    if (max < min) {
      return min;
    }
    max = (max - min) + 1;
    return Math.floor((Math.random() * max) + min);
  };

  Chars = (function(_super) {
    __extends(Chars, _super);

    Chars.ASCII_RANGE_UPPERCASE = [65, 90];

    Chars.ASCII_RANGE_LOWERCASE = [97, 122];

    Chars.ASCII_RANGE_NUMBERS = [48, 57];

    Chars.ASCII_RANGE_SPECIAL_1 = [32, 47];

    Chars.ASCII_RANGE_SPECIAL_2 = [58, 64];

    Chars.ASCII_RANGE_SPECIAL_3 = [91, 96];

    Chars.ASCII_RANGE_SPECIAL_4 = [123, 126];

    Chars.ASCII_RANGE_ALL = [32, 126];

    Chars.REGEXP_SPECIAL_CHARS = ['?', '\\', '[', ']', '(', ')', '*', '+', '.', '/', '|', '^', '$', '<', '>', '-', '&'];

    Chars.ascii = function(ordinal) {
      return String.fromCharCode(_.forceNumber(ordinal, 0));
    };

    Chars.ordinal = function(char) {
      return _.forceNumber(_.forceString(char != null ? char[0] : void 0).charCodeAt(), 0);
    };

    Chars.isUpper = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_UPPERCASE);
    };

    Chars.isLower = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_LOWERCASE);
    };

    Chars.isAlpha = function(char) {
      return Chars.isUpper(char) || Chars.isLower(char);
    };

    Chars.isNumeric = function(char) {
      return _.inRange(Chars.ordinal(char), Chars.ASCII_RANGE_NUMBERS);
    };

    Chars.isAlphaNumeric = function(char) {
      return Chars.isAlpha(char) || Chars.isNumeric(char);
    };

    Chars.isSpecial = function(char) {
      return ('' !== (char = _.forceString(char))) && !Chars.isAlphaNumeric(char);
    };

    Chars.random = function(range) {
      var max, min;
      if (range == null) {
        range = Chars.ASCII_RANGE_ALL;
      }
      if (_.notArray(range) || range.length < 2) {
        return '';
      }
      min = _.limit(range[0], range);
      max = _.limit(range[1], range);
      return Chars.ascii(_.random(min, max));
    };

    function Chars(char, range) {
      if ((range == null) || _.notArray(range)) {
        this.range = Chars.ASCII_RANGE_ALL;
      } else {
        this.range = range;
      }
      this.set(char);
    }

    Chars.prototype.get = function() {
      return this.char;
    };

    Chars.prototype.set = function(char) {
      if (_.isNumber(char) && char > 9) {
        this.char = Chars.ascii(_.limit(char, this.range));
      } else {
        this.char = _.forceString(char != null ? char[0] : void 0, Chars.ascii(this.range[0]));
      }
      return this.char;
    };

    Chars.prototype.next = function(amount) {
      return this.set(this.ordinal + _.forceNumber(amount, 1));
    };

    Chars.prototype.prev = function(amount) {
      return this.set(this.ordinal - _.forceNumber(amount, 1));
    };

    Chars.prototype.isUpper = function() {
      return Chars.isUpper(this.char);
    };

    Chars.prototype.isLower = function() {
      return Chars.isLower(this.char);
    };

    Chars.prototype.isAlpha = function() {
      return Chars.isAlpha(this.char);
    };

    Chars.prototype.isNumeric = function() {
      return Chars.isNumeric(this.char);
    };

    Chars.prototype.isSpecial = function() {
      return Chars.isSpecial(this.char);
    };

    Chars.prototype.isAlphaNumeric = function() {
      return Chars.isAlphaNumeric(this.char);
    };

    Chars.prototype.random = function() {
      return this.set(Chars.random());
    };

    return Chars;

  })(_);

  Object.defineProperty(Chars.prototype, 'ordinal', {
    get: function() {
      return Chars.ordinal(this.char);
    }
  });

  Object.defineProperty(Chars.prototype, 'ascii', {
    get: function() {
      return this.char;
    }
  });

  Chars._ = _;

  if (typeof window !== "undefined" && window !== null) {
    window.Chars = Chars;
  } else if (typeof module !== "undefined" && module !== null) {
    module.exports = Chars;
  }

}).call(this);
